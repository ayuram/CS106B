Warmup
--------------------
Q1. What does the yellow background for a test case indicate in the SimpleTest result window?
A1. A yellow background for a test case indicates a memory leak in the SimpleTest result window.
    It means that while the code technically works, the old memory is never deleted but is instead "leaked" and effectively lost because there are no more pointers to that memory.

Q2. What is the observed consequence of a test that uses `delete` on a memory address that has already been deallocated? 
A2. There are no errors thrown, however the same yellow background from the "memory leak" persists in this test case upon multiple runs.
    However this is less of a leak and more of just deleting something you no longer have access to, since we just forfeited the memory to the computer.

Q3. On your system, what is the observed consequence of `badDeallocate`? Under what circumstances (if any) did the buggy code trigger an error or crash?
A3. There are no observed consequences of 'badDeallocate'. However, an "error" is thrown on the longer list being 'badDeallocate'd upon multiple runs.

Q4. How is a segmentation fault presented on your system?
A4. On my system, the segmentation fault does not even give a yellow background warning, let alone throw an error.


Labyrinth
-------------------
Q5. What is a different legal path through the example labyrinth that gathers all three needed items?
A5. WNNEWSSESWWNSEENES

Sorting Linked Lists
---------------------
Q6. If the `deallocateList` utility function were implemented recursively, give a rough estimate of the maximum length list it could successfully handle. What would be the observed result from attempting to deallocate a list longer than this maximum?
A6. Referring back to my assignment 3, I found my system's maximum stackframe capability was about 65080. This should be the maximum length that the list would be able to succesfully handle. Attempting to do 'deallocateList' recursively on a linked list with a depth bigger than it could handle would cause a stack overflow.

Q7. The prototypes for the quicksort function takes a `ListNode*` by reference. Explain why the pointer itself needs to be passed by reference and what the consequence would be if it were not.
A7. The pointer must be passed by reference because we intend on changing the location to which the pointer points, in order to succesfully sort the list. Failure to do this could result in the pointer pointing somewhere in the middle of the sorted list, which would cause a potentially massive data leak.

Q8. Run time trials and provide your results that confirm that QuickSort is O(NlogN) . Verify the runtime degrades to O(N^2) on inputs constructed to trigger the worst case behavior.
A8. Upon inspection of the data, it is clear that the time complexity is barely slower than linear, which indicates N*logN
    Line 262 TIME_OPERATION quickSort(list) (size =  50000) completed in    0.013 secs
    Line 262 TIME_OPERATION quickSort(list) (size = 100000) completed in    0.027 secs
    Line 262 TIME_OPERATION quickSort(list) (size = 200000) completed in    0.064 secs
    Line 262 TIME_OPERATION quickSort(list) (size = 400000) completed in    0.168 secs
    Line 262 TIME_OPERATION quickSort(list) (size = 800000) completed in    0.469 secs
    Line 262 TIME_OPERATION quickSort(list) (size =1600000) completed in    1.424 secs

Q9. Run the provided timing trials that compare your linked list QuickSort to a Vector sort on the same sequence and report the results. Who wins and why?
A9. Quicksort on the linked list EASILY beats the vector quicksort, I suspect this is because sorting the list in the case of a linked list does not require messing with an array, in which you must shift every element around.
   Line 221 TIME_OPERATION quickSort(list) (size =  50000) completed in    0.012 secs
   Line 222 TIME_OPERATION v.sort() (size =  50000) completed in    0.073 secs
   Line 221 TIME_OPERATION quickSort(list) (size = 100000) completed in    0.026 secs
   Line 222 TIME_OPERATION v.sort() (size = 100000) completed in    0.151 secs
   Line 221 TIME_OPERATION quickSort(list) (size = 200000) completed in    0.066 secs
   Line 222 TIME_OPERATION v.sort() (size = 200000) completed in    0.311 secs
   Line 221 TIME_OPERATION quickSort(list) (size = 400000) completed in     0.15 secs
   Line 222 TIME_OPERATION v.sort() (size = 400000) completed in    0.629 secs

This does beg the question of why does the C++ vector lib use an array for its abstraction in memory, and I suspect it is because deleting a very long array is much faster than deleting a very long linked list.
