Warmup
------

Q1. Looking at a call stack listing in a debugger, what is the indication that the program being debugged uses recursion?
A1. The same function will be listed multiple times (depending on how many times its being called) and adds to the call stack. The lowest number is the current level.

Q2. What is the value of parameter `n` at the innermost level (Level 0 or Level 1, depending on your system)?  What is the highest numbered level shown in the call stack? (you may have to drag the column divider to enlarge the column width to fit all the digits) The range between the two gives an estimate of the capacity of the call stack on your system.
A2. n = -65080. The highest numbered level shown in the call stack is 20.

Q3. Describe how the symptoms of infinite recursion differ from the symptoms of an infinite loop.
A3. An infinite recursion will stack overflow and "unexpectedly finish", while an infinite loop will just have the program keep running.

Q4. What are the specific values of base/exp that result in a test failure?
A4. When base = 0 and exp = 0, it is a test failure because it returns a number instead of throwing an error.
    When the exp is -1, it is a test failure.

Q5. Of the four base cases, which do you think are redundant and can be removed from the function? Which do you think are absolutely necessary? Are there any base cases that you're unsure about?
A5. exp == 1, and exp == -1 are redundant and can be removed. I'm unsure about base == 0. exp == 0 is required.

Q6. First explain why those cases were redundant/unnecessary and then explain why removing them fixed the test failure. (Hint: Consider the types of the values in play here and think about what happens when you do division with integers.)
A6. Those cases were redundant because the code would accomplish the same thing recursively with those "base cases" gone since exp was anyways being decremented. It also fixed the test failure by removing the integer division and replacing it with the double output of the recursive function.

Q7. What is the result of attempting to compute 0 raised to a negative power without a special case for base == 0?
A7. It stack overflows :(

Balanced
--------

Q8. Compare your recursive solution to the iterative approach used for the Check Balance problem in [Section 1][section1]. Which version do you find easier to read and understand? In which version did you find it easier to confirm the correct behavior?
A8. Though both complex, I'd say the recursive solution is much easier to read and understand since it is considerably less code. However, I think correcting behavior was easier in the iterative solution.

Merge
-----

Q9. Give a rough estimate of the maximum length sequence that could be successfully merged on your system assuming a recursive implementation of binary merge.
A9. The maximum length sequence that could be successfully merged would be a total of 65080 assuming a recursive implementation.

Q10. What would be the observed behavior if attempting to recursively merge a sequence larger than that maximum?
A10. The observed behavior if attempting to recursively merge a larger sequence would be a crash due to stack overflow.

Q11. Include the data from your execution timing and explain how is supports your Big O prediction for binary `merge`.
A11. My Big O prediction for merge would be O(n), because it iterates through every element. The data I received in my student test was as follows:
     n = 1500000; seconds = 0.652
     n = 3000000; seconds = 1.3
     n = 6000000; seconds = 2.6
     n = 12000000; seconds = 5.2
     n = 24000000; seconds = 10.39; as we double n, seconds also doubles which indicates they have a linear relation.

Q12. Include the data from your execution timing and explain how it supports your Big O prediction for `multiMerge`.
A12. k = 1100 ; seconds = 1.231;
     k = 2200 ; seconds = 2.391;
     k = 4400 ; seconds = 4.429;
     k = 8800 ; seconds = 8.171; When keeping n constant, the relation with k appears to be quadratic.
     n =  11000 ; 1.249 secs
     n = 22000 ; 2.534 secs
     n = 44000 ; 5.094 secs
     n =  88000 ; 10.247 secs; When keeping k constant, the relation with n also appears to be quadratic.

     From this we can deduce that the final notation for big O should be O(n^2 * k^2). The results from the final test confirm this prediction:

     (n and k are doubling):
     seconds: 1.243, 4.924, 19.826. The big jump from 4.924 to 19.826 with the same loop confirms that it must be multiplicative.
Q13. Include the data from your execution timing and explain how it supports the `O(n log k)` runtime prediction for recMultiMerge.
A13.
Correct (STUDENT_TEST, line 243) Rec Merge Timing (Fixed N)
    Line 250 TIME_OPERATION recMultiMerge(all) (size =   9000) completed in    0.473 secs
    Line 250 TIME_OPERATION recMultiMerge(all) (size =  18000) completed in    0.724 secs
    Line 250 TIME_OPERATION recMultiMerge(all) (size =  36000) completed in    1.227 secs
    Line 250 TIME_OPERATION recMultiMerge(all) (size =  72000) completed in     2.24 secs
    Line 250 TIME_OPERATION recMultiMerge(all) (size = 144000) completed in    4.362 secs

Correct (STUDENT_TEST, line 254) Rec Merge Timing (Fixed K)
    Line 261 TIME_OPERATION recMultiMerge(all) (size =  90000) completed in    0.473 secs
    Line 261 TIME_OPERATION recMultiMerge(all) (size = 180000) completed in    0.742 secs
    Line 261 TIME_OPERATION recMultiMerge(all) (size = 360000) completed in    1.283 secs
    Line 261 TIME_OPERATION recMultiMerge(all) (size = 720000) completed in    2.368 secs
    Line 261 TIME_OPERATION recMultiMerge(all) (size =1440000) completed in    4.579 secs

Correct (STUDENT_TEST, line 265) Rec Merge Timing both variable
    Line 272 TIME_OPERATION recMultiMerge(all) (size =  90000) completed in     0.47 secs
    Line 272 TIME_OPERATION recMultiMerge(all) (size = 180000) completed in     1.02 secs
    Line 272 TIME_OPERATION recMultiMerge(all) (size = 360000) completed in    2.175 secs
    Line 272 TIME_OPERATION recMultiMerge(all) (size = 720000) completed in    4.551 secs
    Line 272 TIME_OPERATION recMultiMerge(all) (size =1440000) completed in    9.504 secs

From this data we can see that n has a linear relationship (when k is fixed), k has a logarithmic relationship (when n is fixed).
Because the 2 data structures are nested, we multiply their big o notations to get O(nlogk).

Q14. Earlier you worked out how a recursive implementation of `merge` would limit the allowable input sequence length. Are the limits on the call stack also an issue for the recursive implementation of `recMultiMerge`? Explain why or why not.
A14. The limits on the call stack will always be an isssue for any recursive implementation of a function. However, because the big o notation of 'recMultiMerge' is so close to linear with it being O(nlogk), we can basically safely ignore it.


Backtracking Warmup
-------------------
Q15: What is the value of the totalMoves variable in hanoiAnimationafter
stepping over the call to moveTower?
A15: 15.

Q16: What is the value of the totalMoves variable inside the first moveTower
call after stepping over its first recursive sub-call? (In other words, just
after stepping over the first recursive sub-call to moveTower inside the else
statement in the recursive function.)
A16: totalMoves = 1.

Q17: After breaking at the base case of moveTower and then choosing Step Out,
where do you end up? (What function are you in, and at what line number?) What
is the value of the totalMoves variable at this point?
A17: Stepping out of the break point brings us to the exact same point in the exact same function. totalMoves has a value of 0 at this point.
Q18: What is the smallest possible input that you used to trigger the bug in 
the program?
A18: A vector of size 1 with the element being a nonzero number triggers a bug.

Q19: Identify the one-character error in the code and explain why that one-character bug causes the function to return the output you see when running on the minimal input you listed above. You should be able to specifically account for how the error causes the result to change from “completely correct” to “terribly wrong.”
A19: The relevant character causing the error in the code is the "=" on line 44. The reason this character causes issues becomes prevalent when doing the total addition operation in the recursive return statement.
     This is because "+=" modifies the original variable, and that modified variable will continue to be passed down the decision tree, which will cause more and more distancing from the solution the bigger the input, due to the nature of recursion.

Embedded Ethics in CS106B
-------------------------
Please refer to the assignment handout for these questions.

A20: My questions:
    1.) Is the end goal of the redestricting to give the fairest voice to the people or bring the most power to your party?
    2.) Will economic opportunity remain equal in the districts?
    3.) Will this map be influenced by political donations?

A21: Assuming I accepted the job, I'd have to work with the fact that I know have a political intent in mind (assuming the work I'm doing is legal).
     Unfortunately, no matter how you go about it, gerrymandering in it of itself is not an ethical practice. Disenfranchisement of voters is inevitable, whether they be minorities or majorities, and that is unethical.
     With that in mind, my rules on its usage would be as follows: do not use this map if you seek to disenfrachise any voter. I emphasize "ANY" because this is not just about rich, poor, black, white, Democrat, or Republican.
     Fundamentally, this is about what you think the rules to this democracy are, and whether you can live with disenfrachising anyone. My answer will always be that I can't live with those ends.

A22: Even before this class I've always wondered if there was a way to do an "anti-gerrymander". I.E create a map that enfranchising everyone equally. The knapsack example in class brought some ideas to mind in terms of the algorithms you could use to achieve this.
     However, that's besides the point. I recently got into app development and have even published my first app. What I notice is that user satisfaction tends to go up when the app doesn't randomly crash or break (shocking! I know). In an era that is becoming increasingly digital,
     the experience I'm gaining in this course could be used to create informative services on which politicians are responsible for Gerrymandering, and even which companies are doing it. We could even go further to promote companies that are working on districting maps that are fair.
     The end goal of this would be to eliminate the "Politicians pick voters" mindset and replace it with what a true democracy stands for.
